#pragma once

#include <string_view>
#include <stddef.h>
#include <stdint.h>
#include <iterator>
#include "declarations"
#include "interface"

#include "../../interfaces/evaluator"

namespace Imagina {
	using pCreateComponent = IAny (*)(const char *ID);
	using pReleaseComponent = void (*)(const char *ID, void *instance);
	
	enum class ComponentType : uint32_t {
		None			= 0,
		Evaluator		= 1,
		LocationManager	= 2,
		PixelProcessor	= 3,
		PixelManager	= 16,
		Controller		= 20,
		MultiPrecision	= 28,
		ModuleExtension	= 31,
	};

	enum class ComponentFlag : uint32_t {
		None = 0,
	};

	struct ComponentInfo {
		const char *Name = nullptr;
		const char *DisplayName = nullptr;
		pCreateComponent Create = nullptr;
		pReleaseComponent Release = nullptr;
		ComponentType Type;
		ComponentFlag Flags;

		template<IEvaluatorImpl T>
		static constexpr ComponentInfo Evaluator(const char *Name, const char *DisplayName) {
			return {
				.Name = Name,
				.DisplayName = DisplayName,
				.Create = [](const char *)->Imagina::IAny { return Imagina::IEvaluator(new T); },
				.Type = ComponentType::Evaluator,
			};
		}
	};

	struct ModuleInfo {
		const char *Name;
		const char *DisplayName;
		size_t ComponentCount;
		const ComponentInfo *Components;

		template <size_t componentCount>
		constexpr ModuleInfo(const char *name, const char *displayName, const ComponentInfo(&components)[componentCount]) :
			Name(name), DisplayName(displayName), ComponentCount(componentCount), Components(components) {}

		constexpr ModuleInfo(const char *name, const char *displayName, const ComponentInfo &component) :
			Name(name), DisplayName(displayName), ComponentCount(1), Components(&component) {}
	};

	using pImInit = void (*)();
	using pImGetModuleInfo = const ModuleInfo *(*)();


	inline uint32_t operator&(ComponentFlag a, ComponentFlag b) { return uint32_t(a) & uint32_t(b); }

	template<typename T> inline constexpr ComponentType TypeToComponentType = ComponentType::None;

	template<> inline constexpr ComponentType TypeToComponentType<IEvaluator>		= ComponentType::Evaluator;
	template<> inline constexpr ComponentType TypeToComponentType<ILocationManager>	= ComponentType::LocationManager;
	template<> inline constexpr ComponentType TypeToComponentType<IPixelProcessor>	= ComponentType::PixelProcessor;
	template<> inline constexpr ComponentType TypeToComponentType<IPixelManager>	= ComponentType::PixelManager;
	template<> inline constexpr ComponentType TypeToComponentType<IController>		= ComponentType::Controller;
	template<> inline constexpr ComponentType TypeToComponentType<MultiPrecision>	= ComponentType::MultiPrecision;

	im_export void LoadBuiltinComponents();

	im_export bool AddModule(const ModuleInfo *moduleInfo, void *handle); // TEMPORARY
	im_export bool LoadModule(const char *filename);
	im_export bool LoadModules(const char *path, const char *extension);

	// Return value is invalidated when new a component is added
	im_export const size_t *GetComponentList(ComponentType type, size_t &count);

	im_export size_t GetComponent(std::string_view fullName);
	im_export size_t GetComponent(ComponentType type);

	im_export const ComponentInfo &GetComponentInfo(size_t id);

	im_export IAny CreateComponent(size_t id);
	im_export IAny CreateComponent(std::string_view fullName);
	im_export IAny CreateComponent(ComponentType type);

	//template<typename T>
	//inline T CreateComponent() {
	//	return (T)CreateComponent(TypeToComponentType<T>);
	//}
}