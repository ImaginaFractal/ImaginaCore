#pragma once

#include <string_view>
#include <stddef.h>
#include <stdint.h>
#include "declarations"
#include "interface"
//#include "module.h"

namespace Imagina {
	enum _ComponentType {
		IM_CT_Evaluator = 1,
		IM_CT_LocationManager = 2,
		IM_CT_PixelProcessor = 3,
		IM_CT_PixelManager = 16,
		IM_CT_Controller = 20,
		IM_CT_MultiPrecision = 28,
		IM_CT_ModuleExtension = 31,
	};

	enum _ComponentFlag {
		IM_CF_UseCApi = 0x1,
	};

	enum _ProxyType {
		IM_PT_LowPrecisionEvaluator = 1,
		IM_PT_SimpleEvaluator = 2,
	};

#ifndef __cplusplus
	typedef uint32_t ComponentType;
	typedef uint32_t ComponentFlag;
	//typedef uint32_t ProxyType;
#else
	enum class ComponentType : uint32_t;
	enum class ComponentFlag : uint32_t;
	//enum class ProxyType : uint32_t;
#endif

	typedef IAny (*pCreateComponent)(const char *ID);
	typedef void (*pReleaseComponent)(const char *ID, void *instance);

	typedef struct {
		const char *Name;
		const char *DisplayName;
		pCreateComponent Create;
		pReleaseComponent Release;
		ComponentType Type;
		ComponentFlag Flags;

		// For C API
		//ProxyType ProxyType;
		//void *FunctionTable;
	} ComponentInfo;

	typedef struct {
		const char *Name;
		const char *DisplayName;
		size_t ComponentCount;
		const ComponentInfo *Components;
	} ModuleInfo;

	typedef void (*pImInit)();
	typedef const ModuleInfo *(*pImGetModuleInfo)();


	enum class ComponentType : uint32_t {
		Evaluator		= IM_CT_Evaluator,
		LocationManager	= IM_CT_LocationManager,
		PixelProcessor	= IM_CT_PixelProcessor,
		PixelManager	= IM_CT_PixelManager,
		Controller		= IM_CT_Controller,
		MultiPrecision	= IM_CT_MultiPrecision,
		ModuleExtension	= IM_CT_ModuleExtension,
	};

	enum class ComponentFlag : uint32_t {
		UseCApi = IM_CF_UseCApi,
	};

	inline uint32_t operator&(ComponentFlag a, ComponentFlag b) { return uint32_t(a) & uint32_t(b); }

	enum class ProxyType : uint32_t {
		LowPrecisionEvaluator = IM_PT_LowPrecisionEvaluator,
		SimpleEvaluator = IM_PT_SimpleEvaluator,
	};

	template<typename T> inline constexpr ComponentType TypeToComponentType = ComponentType(0);

	template<> inline constexpr ComponentType TypeToComponentType<IEvaluator> = ComponentType::Evaluator;
	template<> inline constexpr ComponentType TypeToComponentType<ILocationManager> = ComponentType::LocationManager;
	template<> inline constexpr ComponentType TypeToComponentType<IPixelProcessor> = ComponentType::PixelProcessor;
	template<> inline constexpr ComponentType TypeToComponentType<IPixelManager> = ComponentType::PixelManager;
	template<> inline constexpr ComponentType TypeToComponentType<IController> = ComponentType::Controller;
	template<> inline constexpr ComponentType TypeToComponentType<MultiPrecision> = ComponentType::MultiPrecision;

	struct Component;
	struct Module;

	im_export void LoadBuiltinComponents();

	im_export bool AddModule(const ModuleInfo *moduleInfo, void *handle); // TEMPORARY
	im_export bool LoadModule(const char *filename);
	im_export bool LoadModules(const char *path, const char *extension);

	// Return value is invalidated when new a component is added
	im_export const size_t *GetComponentList(ComponentType type, size_t &count);

	im_export size_t GetComponent(std::string_view fullName);
	im_export size_t GetComponent(ComponentType type);

	im_export const ComponentInfo &GetComponentInfo(size_t id);

	im_export IAny CreateComponent(size_t id);
	im_export IAny CreateComponent(std::string_view fullName);
	im_export IAny CreateComponent(ComponentType type);

	//template<typename T>
	//inline T CreateComponent() {
	//	return (T)CreateComponent(TypeToComponentType<T>);
	//}
}