#pragma once
#include <concepts>
#include <Imagina/interface>
#include <Imagina/types>
#include <Imagina/declarations>
#include <Imagina/pixel_management>

namespace Imagina {
	class IController;

	template<typename T>
	concept IControllerImpl = !Imagina::Interface<T> && requires {
		static_cast<HRLocation (T:: *)()>(&T::GetRenderLocation);
		static_cast<void (T:: *)(IPixelManager pixelManager)>(&T::SetPixelManager);
		static_cast<void (T:: *)(ILocationManager locationManager)>(&T::SetLocationManager);
		static_cast<void (T:: *)(HRReal differenceX, HRReal differenceY)>(&T::UpdateRelativeCoordinates);
		static_cast<void (T:: *)(SRReal deltaTime)>(&T::Update);
	};

	template<IControllerImpl T>
	void _IIG_IController_Release(void *instance) {
		delete (T *)instance;
	}

	template<IControllerImpl T>
	HRLocation _IIG_IController_GetRenderLocation(void *instance) {
		return ((T *)instance)->T::GetRenderLocation();
	}

	template<IControllerImpl T>
	void _IIG_IController_SetPixelManager(void *instance, IPixelManager pixelManager) {
		return ((T *)instance)->T::SetPixelManager(pixelManager);
	}

	template<IControllerImpl T>
	void _IIG_IController_SetLocationManager(void *instance, ILocationManager locationManager) {
		return ((T *)instance)->T::SetLocationManager(locationManager);
	}

	template<IControllerImpl T>
	void _IIG_IController_UpdateRelativeCoordinates(void *instance, HRReal differenceX, HRReal differenceY) {
		return ((T *)instance)->T::UpdateRelativeCoordinates(differenceX, differenceY);
	}

	template<IControllerImpl T>
	void _IIG_IController_Update(void *instance, SRReal deltaTime) {
		return ((T *)instance)->T::Update(deltaTime);
	}

	struct IControllerVTable {
		void *reserved = nullptr; // Must be null
		void (*Release)(void *instance);

		HRLocation (*GetRenderLocation)(void *instance);
		void (*SetPixelManager)(void *instance, IPixelManager pixelManager);
		void (*SetLocationManager)(void *instance, ILocationManager locationManager);
		void (*UpdateRelativeCoordinates)(void *instance, HRReal differenceX, HRReal differenceY);
		void (*Update)(void *instance, SRReal deltaTime);

		template<IControllerImpl T>
		static constexpr IControllerVTable OfType(void (*release)(void *instance) = _IIG_IController_Release<T>) {
			IControllerVTable result;
			result.Release = release;
			result.GetRenderLocation = _IIG_IController_GetRenderLocation<T>;
			result.SetPixelManager = _IIG_IController_SetPixelManager<T>;
			result.SetLocationManager = _IIG_IController_SetLocationManager<T>;
			result.UpdateRelativeCoordinates = _IIG_IController_UpdateRelativeCoordinates<T>;
			result.Update = _IIG_IController_Update<T>;

			return result;
		}

		template<IControllerImpl T>
		static const IControllerVTable value;
	};

	class IController final {
		void *instance;
		const IControllerVTable *vTable;

	public:
		IController() = default;
		IController(const IController &) = default;
		IController(IController &&) = default;
		IController(std::nullptr_t) : instance(nullptr), vTable(nullptr) {}

		IController(void *instance, const IControllerVTable *vTable) : instance(instance), vTable(vTable) {}
		IController(IAny any) : instance(any.instance), vTable((IControllerVTable *)any.vTable) {}

		template<IControllerImpl T>
		IController(T &instance) : instance(&instance), vTable(&IControllerVTable::value<T>) {}

		template<IControllerImpl T>
		IController(T *instance) : instance(instance), vTable(&IControllerVTable::value<T>) {}

		IController &operator=(const IController &) = default;
		IController &operator=(IController &&) = default;

		IController &operator=(std::nullptr_t) { instance = nullptr; vTable = nullptr; return *this; }
		bool operator==(std::nullptr_t) { return instance == nullptr; }
		bool operator!=(std::nullptr_t) { return instance != nullptr; }

		operator IAny() { return IAny(instance, vTable); }
		operator bool() { return instance != nullptr; }

		template<IControllerImpl T>
		explicit operator T *() { return (T *)instance; }

		void Release() {
			vTable->Release(instance);
		}

		HRLocation GetRenderLocation() {
			return vTable->GetRenderLocation(instance);
		}

		void SetPixelManager(IPixelManager pixelManager) {
			return vTable->SetPixelManager(instance, pixelManager);
		}

		void SetLocationManager(ILocationManager locationManager) {
			return vTable->SetLocationManager(instance, locationManager);
		}

		void UpdateRelativeCoordinates(HRReal differenceX, HRReal differenceY) {
			return vTable->UpdateRelativeCoordinates(instance, differenceX, differenceY);
		}

		void Update(SRReal deltaTime) {
			return vTable->Update(instance, deltaTime);
		}

		using _IIG_IsInterface = void;
	};
}