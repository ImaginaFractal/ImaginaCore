#pragma once
#include <concepts>
#include <Imagina/interface>
#include <stdint.h>
#include <vector>
#include <Imagina/types>
#include <Imagina/pixel_processing>

#ifdef __INTELLISENSE__
#define interface class
#endif

namespace Imagina {
	class IEvaluator;

	struct _GpuTexture;
	using GpuTexture = _GpuTexture *;

	class IGraphics;

	template<typename T>
	concept IGraphicsImpl = !Imagina::Interface<T> && requires {
		static_cast<GpuTexture (T:: *)()>(&T::CreateTexture);
		static_cast<void (T:: *)(GpuTexture texture)>(&T::DeleteTexture);
		static_cast<void (T:: *)(GpuTexture texture, size_t width, size_t height, uint32_t *pixels)>(&T::SetTextureImage);
		static_cast<void (T:: *)(GpuTexture texture, size_t width, size_t height, uint32_t *pixels)>(&T::UpdateTextureImage);
	};

	template<IGraphicsImpl T>
	void _IIG_IGraphics_Release(void *instance) {
		delete (T *)instance;
	}

	template<IGraphicsImpl T>
	GpuTexture _IIG_IGraphics_CreateTexture(void *instance) {
		return ((T *)instance)->T::CreateTexture();
	}

	template<IGraphicsImpl T>
	void _IIG_IGraphics_DeleteTexture(void *instance, GpuTexture texture) {
		return ((T *)instance)->T::DeleteTexture(texture);
	}

	template<IGraphicsImpl T>
	void _IIG_IGraphics_SetTextureImage(void *instance, GpuTexture texture, size_t width, size_t height, uint32_t *pixels) {
		return ((T *)instance)->T::SetTextureImage(texture, width, height, pixels);
	}

	template<IGraphicsImpl T>
	void _IIG_IGraphics_UpdateTextureImage(void *instance, GpuTexture texture, size_t width, size_t height, uint32_t *pixels) {
		return ((T *)instance)->T::UpdateTextureImage(texture, width, height, pixels);
	}

	struct IGraphicsVTable {
		void *reserved = nullptr; // Must be null
		void (*Release)(void *instance);

		GpuTexture (*CreateTexture)(void *instance);
		void (*DeleteTexture)(void *instance, GpuTexture texture);
		void (*SetTextureImage)(void *instance, GpuTexture texture, size_t width, size_t height, uint32_t *pixels);
		void (*UpdateTextureImage)(void *instance, GpuTexture texture, size_t width, size_t height, uint32_t *pixels);

		template<IGraphicsImpl T>
		static constexpr IGraphicsVTable OfType(void (*release)(void *instance) = _IIG_IGraphics_Release<T>) {
			IGraphicsVTable result;
			result.Release = release;
			result.CreateTexture = _IIG_IGraphics_CreateTexture<T>;
			result.DeleteTexture = _IIG_IGraphics_DeleteTexture<T>;
			result.SetTextureImage = _IIG_IGraphics_SetTextureImage<T>;
			result.UpdateTextureImage = _IIG_IGraphics_UpdateTextureImage<T>;

			return result;
		}

		template<IGraphicsImpl T>
		static const IGraphicsVTable value;
	};

	class IGraphics final {
		void *instance;
		const IGraphicsVTable *vTable;

	public:
		IGraphics() = default;
		IGraphics(const IGraphics &) = default;
		IGraphics(IGraphics &&) = default;
		IGraphics(std::nullptr_t) : instance(nullptr), vTable(nullptr) {}

		IGraphics(void *instance, const IGraphicsVTable *vTable) : instance(instance), vTable(vTable) {}
		IGraphics(IAny any) : instance(any.instance), vTable((IGraphicsVTable *)any.vTable) {}

		template<IGraphicsImpl T>
		IGraphics(T &instance) : instance(&instance), vTable(&IGraphicsVTable::value<T>) {}

		template<IGraphicsImpl T>
		IGraphics(T *instance) : instance(instance), vTable(&IGraphicsVTable::value<T>) {}

		IGraphics &operator=(const IGraphics &) = default;
		IGraphics &operator=(IGraphics &&) = default;

		IGraphics &operator=(std::nullptr_t) { instance = nullptr; vTable = nullptr; return *this; }
		bool operator==(std::nullptr_t) { return instance == nullptr; }
		bool operator!=(std::nullptr_t) { return instance != nullptr; }

		operator IAny() { return IAny(instance, vTable); }
		operator bool() { return instance != nullptr; }

		template<IGraphicsImpl T>
		explicit operator T *() { return (T *)instance; }

		void Release() {
			vTable->Release(instance);
		}

		GpuTexture CreateTexture() {
			return vTable->CreateTexture(instance);
		}

		void DeleteTexture(GpuTexture texture) {
			return vTable->DeleteTexture(instance, texture);
		}

		void SetTextureImage(GpuTexture texture, size_t width, size_t height, uint32_t *pixels) {
			return vTable->SetTextureImage(instance, texture, width, height, pixels);
		}

		void UpdateTextureImage(GpuTexture texture, size_t width, size_t height, uint32_t *pixels) {
			return vTable->UpdateTextureImage(instance, texture, width, height, pixels);
		}

		using _IIG_IsInterface = void;
	};
	
	struct TextureMapping {
		GpuTexture Texture;
		GRRectangle TextureRectangle;
		HRRectangle FractalRectangle;
	};

	class IPixelManager;

	template<typename T>
	concept IPixelManagerImpl = !Imagina::Interface<T> && requires {
		static_cast<void (T:: *)(IEvaluator evaluator)>(&T::SetEvaluator);
		static_cast<void (T:: *)(PixelPipeline *pipeline)>(&T::UsePixelPipeline);
		static_cast<void (T:: *)(void *data, PixelPipeline::Stage stage)>(&T::GetPixelData);
		static_cast<void (T:: *)(const HRLocation &location)>(&T::SetImmediateTarget);
		static_cast<void (T:: *)(GRInt width, GRInt height)>(&T::SetResolution);
		static_cast<void (T:: *)()>(&T::InvalidatePixels);
		static_cast<void (T:: *)(HRReal differenceX, HRReal differenceY)>(&T::UpdateRelativeCoordinates);
		static_cast<void (T:: *)()>(&T::Update);
	};

	template<IPixelManagerImpl T>
	void _IIG_IPixelManager_Release(void *instance) {
		delete (T *)instance;
	}

	template<IPixelManagerImpl T>
	void _IIG_IPixelManager_SetEvaluator(void *instance, IAny evaluator) {
		return ((T *)instance)->T::SetEvaluator((const IEvaluator &)evaluator);
	}

	template<IPixelManagerImpl T>
	void _IIG_IPixelManager_UsePixelPipeline(void *instance, PixelPipeline *pipeline) {
		return ((T *)instance)->T::UsePixelPipeline(pipeline);
	}

	template<IPixelManagerImpl T>
	void _IIG_IPixelManager_GetPixelData(void *instance, void *data, PixelPipeline::Stage stage) {
		return ((T *)instance)->T::GetPixelData(data, stage);
	}

	template<IPixelManagerImpl T>
	void _IIG_IPixelManager_SetImmediateTarget(void *instance, const HRLocation &location) {
		return ((T *)instance)->T::SetImmediateTarget(location);
	}

	template<IPixelManagerImpl T>
	void _IIG_IPixelManager_SetResolution(void *instance, GRInt width, GRInt height) {
		return ((T *)instance)->T::SetResolution(width, height);
	}

	template<IPixelManagerImpl T>
	void _IIG_IPixelManager_InvalidatePixels(void *instance) {
		return ((T *)instance)->T::InvalidatePixels();
	}

	template<IPixelManagerImpl T>
	void _IIG_IPixelManager_UpdateRelativeCoordinates(void *instance, HRReal differenceX, HRReal differenceY) {
		return ((T *)instance)->T::UpdateRelativeCoordinates(differenceX, differenceY);
	}

	template<IPixelManagerImpl T>
	void _IIG_IPixelManager_Update(void *instance) {
		return ((T *)instance)->T::Update();
	}

	struct IPixelManagerVTable {
		void *reserved = nullptr; // Must be null
		void (*Release)(void *instance);

		void (*SetEvaluator)(void *instance, IAny evaluator);
		void (*UsePixelPipeline)(void *instance, PixelPipeline *pipeline);
		void (*GetPixelData)(void *instance, void *data, PixelPipeline::Stage stage);
		void (*SetImmediateTarget)(void *instance, const HRLocation &location);
		void (*SetResolution)(void *instance, GRInt width, GRInt height);
		void (*InvalidatePixels)(void *instance);
		void (*UpdateRelativeCoordinates)(void *instance, HRReal differenceX, HRReal differenceY);
		void (*Update)(void *instance);

		template<IPixelManagerImpl T>
		static constexpr IPixelManagerVTable OfType(void (*release)(void *instance) = _IIG_IPixelManager_Release<T>) {
			IPixelManagerVTable result;
			result.Release = release;
			result.SetEvaluator = _IIG_IPixelManager_SetEvaluator<T>;
			result.UsePixelPipeline = _IIG_IPixelManager_UsePixelPipeline<T>;
			result.GetPixelData = _IIG_IPixelManager_GetPixelData<T>;
			result.SetImmediateTarget = _IIG_IPixelManager_SetImmediateTarget<T>;
			result.SetResolution = _IIG_IPixelManager_SetResolution<T>;
			result.InvalidatePixels = _IIG_IPixelManager_InvalidatePixels<T>;
			result.UpdateRelativeCoordinates = _IIG_IPixelManager_UpdateRelativeCoordinates<T>;
			result.Update = _IIG_IPixelManager_Update<T>;

			return result;
		}

		template<IPixelManagerImpl T>
		static const IPixelManagerVTable value;
	};

	class IPixelManager final {
		void *instance;
		const IPixelManagerVTable *vTable;

	public:
		IPixelManager() = default;
		IPixelManager(const IPixelManager &) = default;
		IPixelManager(IPixelManager &&) = default;
		IPixelManager(std::nullptr_t) : instance(nullptr), vTable(nullptr) {}

		IPixelManager(void *instance, const IPixelManagerVTable *vTable) : instance(instance), vTable(vTable) {}
		IPixelManager(IAny any) : instance(any.instance), vTable((IPixelManagerVTable *)any.vTable) {}

		template<IPixelManagerImpl T>
		IPixelManager(T &instance) : instance(&instance), vTable(&IPixelManagerVTable::value<T>) {}

		template<IPixelManagerImpl T>
		IPixelManager(T *instance) : instance(instance), vTable(&IPixelManagerVTable::value<T>) {}

		IPixelManager &operator=(const IPixelManager &) = default;
		IPixelManager &operator=(IPixelManager &&) = default;

		IPixelManager &operator=(std::nullptr_t) { instance = nullptr; vTable = nullptr; return *this; }
		bool operator==(std::nullptr_t) { return instance == nullptr; }
		bool operator!=(std::nullptr_t) { return instance != nullptr; }

		operator IAny() { return IAny(instance, vTable); }
		operator bool() { return instance != nullptr; }

		template<IPixelManagerImpl T>
		explicit operator T *() { return (T *)instance; }

		void Release() {
			vTable->Release(instance);
		}

		void SetEvaluator(const IEvaluator &evaluator) {
			return vTable->SetEvaluator(instance, (IAny &)evaluator);
		}

		void UsePixelPipeline(PixelPipeline *pipeline) {
			return vTable->UsePixelPipeline(instance, pipeline);
		}

		void GetPixelData(void *data, PixelPipeline::Stage stage) {
			return vTable->GetPixelData(instance, data, stage);
		}

		void SetImmediateTarget(const HRLocation &location) {
			return vTable->SetImmediateTarget(instance, location);
		}

		void SetResolution(GRInt width, GRInt height) {
			return vTable->SetResolution(instance, width, height);
		}

		void InvalidatePixels() {
			return vTable->InvalidatePixels(instance);
		}

		void UpdateRelativeCoordinates(HRReal differenceX, HRReal differenceY) {
			return vTable->UpdateRelativeCoordinates(instance, differenceX, differenceY);
		}

		void Update() {
			return vTable->Update(instance);
		}

		using _IIG_IsInterface = void;
	};

	class IGpuTextureManager;

	template<typename T>
	concept IGpuTextureManagerImpl = !Imagina::Interface<T> && requires {
		static_cast<void (T:: *)(IGraphics graphics)>(&T::ActivateGpu);
		static_cast<void (T:: *)(bool cleanup)>(&T::DeactivateGpu);
		static_cast<void (T:: *)(PixelPipeline::Stage uploadPoint)>(&T::SetTextureUploadPoint);
		static_cast<std::vector<TextureMapping> (T:: *)(const HRRectangle &location)>(&T::GetTextureMappings);
	};

	template<IGpuTextureManagerImpl T>
	void _IIG_IGpuTextureManager_Release(void *instance) {
		delete (T *)instance;
	}

	template<IGpuTextureManagerImpl T>
	void _IIG_IGpuTextureManager_ActivateGpu(void *instance, IGraphics graphics) {
		return ((T *)instance)->T::ActivateGpu(graphics);
	}

	template<IGpuTextureManagerImpl T>
	void _IIG_IGpuTextureManager_DeactivateGpu(void *instance, bool cleanup) {
		return ((T *)instance)->T::DeactivateGpu(cleanup);
	}

	template<IGpuTextureManagerImpl T>
	void _IIG_IGpuTextureManager_SetTextureUploadPoint(void *instance, PixelPipeline::Stage uploadPoint) {
		return ((T *)instance)->T::SetTextureUploadPoint(uploadPoint);
	}

	template<IGpuTextureManagerImpl T>
	std::vector<TextureMapping> _IIG_IGpuTextureManager_GetTextureMappings(void *instance, const HRRectangle &location) {
		return ((T *)instance)->T::GetTextureMappings(location);
	}

	struct IGpuTextureManagerVTable {
		void *reserved = nullptr; // Must be null
		void (*Release)(void *instance);

		void (*ActivateGpu)(void *instance, IGraphics graphics);
		void (*DeactivateGpu)(void *instance, bool cleanup);
		void (*SetTextureUploadPoint)(void *instance, PixelPipeline::Stage uploadPoint);
		std::vector<TextureMapping> (*GetTextureMappings)(void *instance, const HRRectangle &location);

		template<IGpuTextureManagerImpl T>
		static constexpr IGpuTextureManagerVTable OfType(void (*release)(void *instance) = _IIG_IGpuTextureManager_Release<T>) {
			IGpuTextureManagerVTable result;
			result.Release = release;
			result.ActivateGpu = _IIG_IGpuTextureManager_ActivateGpu<T>;
			result.DeactivateGpu = _IIG_IGpuTextureManager_DeactivateGpu<T>;
			result.SetTextureUploadPoint = _IIG_IGpuTextureManager_SetTextureUploadPoint<T>;
			result.GetTextureMappings = _IIG_IGpuTextureManager_GetTextureMappings<T>;

			return result;
		}

		template<IGpuTextureManagerImpl T>
		static const IGpuTextureManagerVTable value;
	};

	class IGpuTextureManager final {
		void *instance;
		const IGpuTextureManagerVTable *vTable;

	public:
		IGpuTextureManager() = default;
		IGpuTextureManager(const IGpuTextureManager &) = default;
		IGpuTextureManager(IGpuTextureManager &&) = default;
		IGpuTextureManager(std::nullptr_t) : instance(nullptr), vTable(nullptr) {}

		IGpuTextureManager(void *instance, const IGpuTextureManagerVTable *vTable) : instance(instance), vTable(vTable) {}
		IGpuTextureManager(IAny any) : instance(any.instance), vTable((IGpuTextureManagerVTable *)any.vTable) {}

		template<IGpuTextureManagerImpl T>
		IGpuTextureManager(T &instance) : instance(&instance), vTable(&IGpuTextureManagerVTable::value<T>) {}

		template<IGpuTextureManagerImpl T>
		IGpuTextureManager(T *instance) : instance(instance), vTable(&IGpuTextureManagerVTable::value<T>) {}

		IGpuTextureManager &operator=(const IGpuTextureManager &) = default;
		IGpuTextureManager &operator=(IGpuTextureManager &&) = default;

		IGpuTextureManager &operator=(std::nullptr_t) { instance = nullptr; vTable = nullptr; return *this; }
		bool operator==(std::nullptr_t) { return instance == nullptr; }
		bool operator!=(std::nullptr_t) { return instance != nullptr; }

		operator IAny() { return IAny(instance, vTable); }
		operator bool() { return instance != nullptr; }

		template<IGpuTextureManagerImpl T>
		explicit operator T *() { return (T *)instance; }

		void Release() {
			vTable->Release(instance);
		}

		void ActivateGpu(IGraphics graphics) {
			return vTable->ActivateGpu(instance, graphics);
		}

		void DeactivateGpu(bool cleanup = true) {
			return vTable->DeactivateGpu(instance, cleanup);
		}

		void SetTextureUploadPoint(PixelPipeline::Stage uploadPoint) {
			return vTable->SetTextureUploadPoint(instance, uploadPoint);
		}

		std::vector<TextureMapping> GetTextureMappings(const HRRectangle &location) {
			return vTable->GetTextureMappings(instance, location);
		}

		using _IIG_IsInterface = void;
	};

	class IGpuPixelManager;

	template<typename T>
	concept IGpuPixelManagerImpl = !Imagina::Interface<T> && IPixelManagerImpl<T> && IGpuTextureManagerImpl<T>;

	template<IGpuPixelManagerImpl T>
	void _IIG_IGpuPixelManager_Release(void *instance) {
		delete (T *)instance;
	}

	struct IGpuPixelManagerVTable : IPixelManagerVTable {
		IGpuTextureManagerVTable IGpuTextureManagervTable;

		template<IGpuPixelManagerImpl T>
		static constexpr IGpuPixelManagerVTable OfType(void (*release)(void *instance) = _IIG_IGpuPixelManager_Release<T>) {
			IGpuPixelManagerVTable result;
			(IPixelManagerVTable &)result = IPixelManagerVTable::OfType<T>(release);
			result.IGpuTextureManagervTable = IGpuTextureManagerVTable::OfType<T>(release);

			return result;
		}

		template<IGpuPixelManagerImpl T>
		static const IGpuPixelManagerVTable value;
	};

	class IGpuPixelManager final {
		void *instance;
		const IGpuPixelManagerVTable *vTable;

	public:
		IGpuPixelManager() = default;
		IGpuPixelManager(const IGpuPixelManager &) = default;
		IGpuPixelManager(IGpuPixelManager &&) = default;
		IGpuPixelManager(std::nullptr_t) : instance(nullptr), vTable(nullptr) {}

		IGpuPixelManager(void *instance, const IGpuPixelManagerVTable *vTable) : instance(instance), vTable(vTable) {}
		IGpuPixelManager(IAny any) : instance(any.instance), vTable((IGpuPixelManagerVTable *)any.vTable) {}

		template<IGpuPixelManagerImpl T>
		IGpuPixelManager(T &instance) : instance(&instance), vTable(&IGpuPixelManagerVTable::value<T>) {}

		template<IGpuPixelManagerImpl T>
		IGpuPixelManager(T *instance) : instance(instance), vTable(&IGpuPixelManagerVTable::value<T>) {}

		IGpuPixelManager &operator=(const IGpuPixelManager &) = default;
		IGpuPixelManager &operator=(IGpuPixelManager &&) = default;

		IGpuPixelManager &operator=(std::nullptr_t) { instance = nullptr; vTable = nullptr; return *this; }
		bool operator==(std::nullptr_t) { return instance == nullptr; }
		bool operator!=(std::nullptr_t) { return instance != nullptr; }

		operator IAny() { return IAny(instance, vTable); }
		operator bool() { return instance != nullptr; }

		template<IGpuPixelManagerImpl T>
		explicit operator T *() { return (T *)instance; }

		operator IPixelManager() { return IPixelManager(instance, vTable); }
		operator IGpuTextureManager() { return IGpuTextureManager(instance, &vTable->IGpuTextureManagervTable); }

		void Release() {
			vTable->Release(instance);
		}

		void SetEvaluator(const IEvaluator &evaluator) {
			return vTable->SetEvaluator(instance, (IAny &)evaluator);
		}

		void UsePixelPipeline(PixelPipeline *pipeline) {
			return vTable->UsePixelPipeline(instance, pipeline);
		}

		void GetPixelData(void *data, PixelPipeline::Stage stage) {
			return vTable->GetPixelData(instance, data, stage);
		}

		void SetImmediateTarget(const HRLocation &location) {
			return vTable->SetImmediateTarget(instance, location);
		}

		void SetResolution(GRInt width, GRInt height) {
			return vTable->SetResolution(instance, width, height);
		}

		void InvalidatePixels() {
			return vTable->InvalidatePixels(instance);
		}

		void UpdateRelativeCoordinates(HRReal differenceX, HRReal differenceY) {
			return vTable->UpdateRelativeCoordinates(instance, differenceX, differenceY);
		}

		void Update() {
			return vTable->Update(instance);
		}

		void ActivateGpu(IGraphics graphics) {
			return vTable->IGpuTextureManagervTable.ActivateGpu(instance, graphics);
		}

		void DeactivateGpu(bool cleanup = true) {
			return vTable->IGpuTextureManagervTable.DeactivateGpu(instance, cleanup);
		}

		void SetTextureUploadPoint(PixelPipeline::Stage uploadPoint) {
			return vTable->IGpuTextureManagervTable.SetTextureUploadPoint(instance, uploadPoint);
		}

		std::vector<TextureMapping> GetTextureMappings(const HRRectangle &location) {
			return vTable->IGpuTextureManagervTable.GetTextureMappings(instance, location);
		}

		using _IIG_IsInterface = void;
	};

	class IRasterizingInterface;

	template<typename T>
	concept IRasterizingInterfaceImpl = !Imagina::Interface<T> && requires {
		static_cast<bool (T:: *)(HRReal &x, HRReal &y)>(&T::GetPixel);
		static_cast<void (T:: *)(HRReal &x, HRReal &y)>(&T::GetDdx);
		static_cast<void (T:: *)(HRReal &x, HRReal &y)>(&T::GetDdy);
		static_cast<void (T:: *)(void *value)>(&T::WriteResults);
	};

	template<IRasterizingInterfaceImpl T>
	void _IIG_IRasterizingInterface_Release(void *instance) {
		delete (T *)instance;
	}

	template<IRasterizingInterfaceImpl T>
	bool _IIG_IRasterizingInterface_GetPixel(void *instance, HRReal &x, HRReal &y) {
		return ((T *)instance)->T::GetPixel(x, y);
	}

	template<IRasterizingInterfaceImpl T>
	void _IIG_IRasterizingInterface_GetDdx(void *instance, HRReal &x, HRReal &y) {
		return ((T *)instance)->T::GetDdx(x, y);
	}

	template<IRasterizingInterfaceImpl T>
	void _IIG_IRasterizingInterface_GetDdy(void *instance, HRReal &x, HRReal &y) {
		return ((T *)instance)->T::GetDdy(x, y);
	}

	template<IRasterizingInterfaceImpl T>
	void _IIG_IRasterizingInterface_WriteResults(void *instance, void *value) {
		return ((T *)instance)->T::WriteResults(value);
	}

	struct IRasterizingInterfaceVTable {
		void *reserved = nullptr; // Must be null
		void (*Release)(void *instance);

		bool (*GetPixel)(void *instance, HRReal &x, HRReal &y);
		void (*GetDdx)(void *instance, HRReal &x, HRReal &y);
		void (*GetDdy)(void *instance, HRReal &x, HRReal &y);
		void (*WriteResults)(void *instance, void *value);

		template<IRasterizingInterfaceImpl T>
		static constexpr IRasterizingInterfaceVTable OfType(void (*release)(void *instance) = _IIG_IRasterizingInterface_Release<T>) {
			IRasterizingInterfaceVTable result;
			result.Release = release;
			result.GetPixel = _IIG_IRasterizingInterface_GetPixel<T>;
			result.GetDdx = _IIG_IRasterizingInterface_GetDdx<T>;
			result.GetDdy = _IIG_IRasterizingInterface_GetDdy<T>;
			result.WriteResults = _IIG_IRasterizingInterface_WriteResults<T>;

			return result;
		}

		template<IRasterizingInterfaceImpl T>
		static const IRasterizingInterfaceVTable value;
	};

	class IRasterizingInterface final {
		void *instance;
		const IRasterizingInterfaceVTable *vTable;

	public:
		IRasterizingInterface() = default;
		IRasterizingInterface(const IRasterizingInterface &) = default;
		IRasterizingInterface(IRasterizingInterface &&) = default;
		IRasterizingInterface(std::nullptr_t) : instance(nullptr), vTable(nullptr) {}

		IRasterizingInterface(void *instance, const IRasterizingInterfaceVTable *vTable) : instance(instance), vTable(vTable) {}
		IRasterizingInterface(IAny any) : instance(any.instance), vTable((IRasterizingInterfaceVTable *)any.vTable) {}

		template<IRasterizingInterfaceImpl T>
		IRasterizingInterface(T &instance) : instance(&instance), vTable(&IRasterizingInterfaceVTable::value<T>) {}

		template<IRasterizingInterfaceImpl T>
		IRasterizingInterface(T *instance) : instance(instance), vTable(&IRasterizingInterfaceVTable::value<T>) {}

		IRasterizingInterface &operator=(const IRasterizingInterface &) = default;
		IRasterizingInterface &operator=(IRasterizingInterface &&) = default;

		IRasterizingInterface &operator=(std::nullptr_t) { instance = nullptr; vTable = nullptr; return *this; }
		bool operator==(std::nullptr_t) { return instance == nullptr; }
		bool operator!=(std::nullptr_t) { return instance != nullptr; }

		operator IAny() { return IAny(instance, vTable); }
		operator bool() { return instance != nullptr; }

		template<IRasterizingInterfaceImpl T>
		explicit operator T *() { return (T *)instance; }

		void Release() {
			vTable->Release(instance);
		}

		bool GetPixel(HRReal &x, HRReal &y) {
			return vTable->GetPixel(instance, x, y);
		}

		void GetDdx(HRReal &x, HRReal &y) {
			return vTable->GetDdx(instance, x, y);
		}

		void GetDdy(HRReal &x, HRReal &y) {
			return vTable->GetDdy(instance, x, y);
		}

		void WriteResults(void *value) {
			return vTable->WriteResults(instance, value);
		}

		using _IIG_IsInterface = void;
	};

	class IRasterizer;

	template<typename T>
	concept IRasterizerImpl = !Imagina::Interface<T> && requires {
		static_cast<void (T:: *)()>(&T::Cancel);
		static_cast<IRasterizingInterface (T:: *)()>(&T::GetRasterizingInterface);
		static_cast<void (T:: *)(IRasterizingInterface Interface)>(&T::FreeRasterizingInterface);
	};

	template<IRasterizerImpl T>
	void _IIG_IRasterizer_Release(void *instance) {
		delete (T *)instance;
	}

	template<IRasterizerImpl T>
	void _IIG_IRasterizer_Cancel(void *instance) {
		return ((T *)instance)->T::Cancel();
	}

	template<IRasterizerImpl T>
	IRasterizingInterface _IIG_IRasterizer_GetRasterizingInterface(void *instance) {
		return ((T *)instance)->T::GetRasterizingInterface();
	}

	template<IRasterizerImpl T>
	void _IIG_IRasterizer_FreeRasterizingInterface(void *instance, IRasterizingInterface Interface) {
		return ((T *)instance)->T::FreeRasterizingInterface(Interface);
	}

	struct IRasterizerVTable {
		void *reserved = nullptr; // Must be null
		void (*Release)(void *instance);

		void (*Cancel)(void *instance);
		IRasterizingInterface (*GetRasterizingInterface)(void *instance);
		void (*FreeRasterizingInterface)(void *instance, IRasterizingInterface Interface);

		template<IRasterizerImpl T>
		static constexpr IRasterizerVTable OfType(void (*release)(void *instance) = _IIG_IRasterizer_Release<T>) {
			IRasterizerVTable result;
			result.Release = release;
			result.Cancel = _IIG_IRasterizer_Cancel<T>;
			result.GetRasterizingInterface = _IIG_IRasterizer_GetRasterizingInterface<T>;
			result.FreeRasterizingInterface = _IIG_IRasterizer_FreeRasterizingInterface<T>;

			return result;
		}

		template<IRasterizerImpl T>
		static const IRasterizerVTable value;
	};

	class IRasterizer final {
		void *instance;
		const IRasterizerVTable *vTable;

	public:
		IRasterizer() = default;
		IRasterizer(const IRasterizer &) = default;
		IRasterizer(IRasterizer &&) = default;
		IRasterizer(std::nullptr_t) : instance(nullptr), vTable(nullptr) {}

		IRasterizer(void *instance, const IRasterizerVTable *vTable) : instance(instance), vTable(vTable) {}
		IRasterizer(IAny any) : instance(any.instance), vTable((IRasterizerVTable *)any.vTable) {}

		template<IRasterizerImpl T>
		IRasterizer(T &instance) : instance(&instance), vTable(&IRasterizerVTable::value<T>) {}

		template<IRasterizerImpl T>
		IRasterizer(T *instance) : instance(instance), vTable(&IRasterizerVTable::value<T>) {}

		IRasterizer &operator=(const IRasterizer &) = default;
		IRasterizer &operator=(IRasterizer &&) = default;

		IRasterizer &operator=(std::nullptr_t) { instance = nullptr; vTable = nullptr; return *this; }
		bool operator==(std::nullptr_t) { return instance == nullptr; }
		bool operator!=(std::nullptr_t) { return instance != nullptr; }

		operator IAny() { return IAny(instance, vTable); }
		operator bool() { return instance != nullptr; }

		template<IRasterizerImpl T>
		explicit operator T *() { return (T *)instance; }

		void Release() {
			vTable->Release(instance);
		}

		void Cancel() {
			return vTable->Cancel(instance);
		}

		IRasterizingInterface GetRasterizingInterface() {
			return vTable->GetRasterizingInterface(instance);
		}

		void FreeRasterizingInterface(IRasterizingInterface Interface) {
			return vTable->FreeRasterizingInterface(instance, Interface);
		}

		using _IIG_IsInterface = void;
	};
}

#ifdef __INTELLISENSE__
#undef interface
#endif