#pragma once
// This file is automatically generated. To make modifications, please edit interfaces/evaluator.i

#include <concepts>
#include <Imagina/interface>

#include <Imagina/numerics>
#include <Imagina/computation>
#include <Imagina/pixel_processing>
#include "location_manager"

#ifdef __INTELLISENSE__
#define interface class
#endif

namespace Imagina {
	class IRasterizer;

	struct StandardEvaluationParameters {
		ITUInt Iterations = 1024;
		HRReal DivergentEscapeRadius = 0x1.0p8;
		HRReal ConvergentEscapeRadius = 0x1.0p-16;
	};

	class IEvaluator;

	template<typename T>
	concept IEvaluatorImpl = !Imagina::Interface<T> && requires {
		static_cast<ILocationManager (T:: *)()>(&T::GetLocationManager);
		static_cast<const PixelDataInfo *(T:: *)()>(&T::GetOutputInfo);
		static_cast<void (T:: *)(const StandardEvaluationParameters &parameters)>(&T::SetEvaluationParameters);
		static_cast<bool (T:: *)()>(&T::Ready);
		static_cast<ExecutionContext *(T:: *)(const HRCircle &circle, IRasterizer rasterizer)>(&T::RunEvaluation);
	};

	template<IEvaluatorImpl T>
	void _IIG_IEvaluator_Release(void *instance) {
		delete (T *)instance;
	}

	template<IEvaluatorImpl T>
	ILocationManager _IIG_IEvaluator_GetLocationManager(void *instance) {
		return ((T *)instance)->T::GetLocationManager();
	}

	template<IEvaluatorImpl T>
	const PixelDataInfo *_IIG_IEvaluator_GetOutputInfo(void *instance) {
		return ((T *)instance)->T::GetOutputInfo();
	}

	template<IEvaluatorImpl T>
	void _IIG_IEvaluator_SetEvaluationParameters(void *instance, const StandardEvaluationParameters &parameters) {
		return ((T *)instance)->T::SetEvaluationParameters(parameters);
	}

	template<IEvaluatorImpl T>
	bool _IIG_IEvaluator_Ready(void *instance) {
		return ((T *)instance)->T::Ready();
	}

	template<IEvaluatorImpl T>
	ExecutionContext *_IIG_IEvaluator_RunEvaluation(void *instance, const HRCircle &circle, IAny rasterizer) {
		return ((T *)instance)->T::RunEvaluation(circle, (const IRasterizer &)rasterizer);
	}

	struct IEvaluatorVTable {
		void *reserved = nullptr; // Must be null
		void (*Release)(void *instance);

		ILocationManager (*GetLocationManager)(void *instance);
		const PixelDataInfo *(*GetOutputInfo)(void *instance);
		void (*SetEvaluationParameters)(void *instance, const StandardEvaluationParameters &parameters);
		bool (*Ready)(void *instance);
		ExecutionContext *(*RunEvaluation)(void *instance, const HRCircle &circle, IAny rasterizer);

		template<IEvaluatorImpl T>
		static constexpr IEvaluatorVTable OfType(void (*release)(void *instance) = _IIG_IEvaluator_Release<T>) {
			IEvaluatorVTable result;
			result.Release = release;
			result.GetLocationManager = _IIG_IEvaluator_GetLocationManager<T>;
			result.GetOutputInfo = _IIG_IEvaluator_GetOutputInfo<T>;
			result.SetEvaluationParameters = _IIG_IEvaluator_SetEvaluationParameters<T>;
			result.Ready = _IIG_IEvaluator_Ready<T>;
			result.RunEvaluation = _IIG_IEvaluator_RunEvaluation<T>;

			return result;
		}

		template<IEvaluatorImpl T>
		static const IEvaluatorVTable value;
	};

	class IEvaluator final {
		mutable void *instance;
		mutable const IEvaluatorVTable *vTable;

	public:
		IEvaluator() = default;
		IEvaluator(const IEvaluator &) = default;
		IEvaluator(IEvaluator &&) = default;
		IEvaluator(std::nullptr_t) : instance(nullptr), vTable(nullptr) {}

		IEvaluator(void *instance, const IEvaluatorVTable *vTable) : instance(instance), vTable(vTable) {}
		explicit IEvaluator(IAny any) : instance(any.instance), vTable((IEvaluatorVTable *)any.vTable) {}

		template<IEvaluatorImpl T>
		IEvaluator(T &instance) : instance(&instance), vTable(&IEvaluatorVTable::value<T>) {}

		template<IEvaluatorImpl T>
		IEvaluator(T *instance) : instance(instance), vTable(&IEvaluatorVTable::value<T>) {}

		IEvaluator &operator=(IEvaluator &x) { instance = x.instance; vTable = x.vTable; return *this; }
		IEvaluator &operator=(std::nullptr_t) { instance = nullptr; vTable = nullptr; return *this; }

		const IEvaluator &operator=(const IEvaluator &x) const { instance = x.instance; vTable = x.vTable; return *this; }
		const IEvaluator &operator=(std::nullptr_t) const { instance = nullptr; vTable = nullptr; return *this; }

		bool operator==(const IEvaluator x) const { return instance == x.instance; }
		bool operator!=(const IEvaluator x) const { return instance != x.instance; }

		operator IAny() { return IAny(instance, vTable); }
		explicit operator IAny() const { return IAny(instance, vTable); }
		operator bool() const { return instance != nullptr; }

		template<IEvaluatorImpl T>
		explicit operator T *() { return (T *)instance; }

		void Release() {
			if (!instance) return;
			vTable->Release(instance);
			*this = nullptr;
		}

		ILocationManager GetLocationManager() {
			return vTable->GetLocationManager(instance);
		}

		const PixelDataInfo *GetOutputInfo() {
			return vTable->GetOutputInfo(instance);
		}

		void SetEvaluationParameters(const StandardEvaluationParameters &parameters) {
			return vTable->SetEvaluationParameters(instance, parameters);
		}

		bool Ready() {
			return vTable->Ready(instance);
		}

		ExecutionContext *RunEvaluation(const HRCircle &circle, const IRasterizer &rasterizer) {
			return vTable->RunEvaluation(instance, circle, (IAny &)rasterizer);
		}

		using _IIG_IsInterface = void;
	};

	//interface StandardEvaluator : IEvaluator {
	//	void SetReferenceLocation(const HPReal &x, const HPReal &y, HRReal radius); // TEMPORARY
	//};

	class IComplexLocationSink;

	template<typename T>
	concept IComplexLocationSinkImpl = !Imagina::Interface<T> && requires {
		static_cast<void (T:: *)(const HPReal &x, const HPReal &y, HRReal radius)>(&T::SetReferenceLocation);
	};

	template<IComplexLocationSinkImpl T>
	void _IIG_IComplexLocationSink_Release(void *instance) {
		delete (T *)instance;
	}

	template<IComplexLocationSinkImpl T>
	void _IIG_IComplexLocationSink_SetReferenceLocation(void *instance, const HPReal &x, const HPReal &y, HRReal radius) {
		return ((T *)instance)->T::SetReferenceLocation(x, y, radius);
	}

	struct IComplexLocationSinkVTable {
		void *reserved = nullptr; // Must be null
		void (*Release)(void *instance);

		void (*SetReferenceLocation)(void *instance, const HPReal &x, const HPReal &y, HRReal radius);

		template<IComplexLocationSinkImpl T>
		static constexpr IComplexLocationSinkVTable OfType(void (*release)(void *instance) = _IIG_IComplexLocationSink_Release<T>) {
			IComplexLocationSinkVTable result;
			result.Release = release;
			result.SetReferenceLocation = _IIG_IComplexLocationSink_SetReferenceLocation<T>;

			return result;
		}

		template<IComplexLocationSinkImpl T>
		static const IComplexLocationSinkVTable value;
	};

	class IComplexLocationSink final {
		mutable void *instance;
		mutable const IComplexLocationSinkVTable *vTable;

	public:
		IComplexLocationSink() = default;
		IComplexLocationSink(const IComplexLocationSink &) = default;
		IComplexLocationSink(IComplexLocationSink &&) = default;
		IComplexLocationSink(std::nullptr_t) : instance(nullptr), vTable(nullptr) {}

		IComplexLocationSink(void *instance, const IComplexLocationSinkVTable *vTable) : instance(instance), vTable(vTable) {}
		explicit IComplexLocationSink(IAny any) : instance(any.instance), vTable((IComplexLocationSinkVTable *)any.vTable) {}

		template<IComplexLocationSinkImpl T>
		IComplexLocationSink(T &instance) : instance(&instance), vTable(&IComplexLocationSinkVTable::value<T>) {}

		template<IComplexLocationSinkImpl T>
		IComplexLocationSink(T *instance) : instance(instance), vTable(&IComplexLocationSinkVTable::value<T>) {}

		IComplexLocationSink &operator=(IComplexLocationSink &x) { instance = x.instance; vTable = x.vTable; return *this; }
		IComplexLocationSink &operator=(std::nullptr_t) { instance = nullptr; vTable = nullptr; return *this; }

		const IComplexLocationSink &operator=(const IComplexLocationSink &x) const { instance = x.instance; vTable = x.vTable; return *this; }
		const IComplexLocationSink &operator=(std::nullptr_t) const { instance = nullptr; vTable = nullptr; return *this; }

		bool operator==(const IComplexLocationSink x) const { return instance == x.instance; }
		bool operator!=(const IComplexLocationSink x) const { return instance != x.instance; }

		operator IAny() { return IAny(instance, vTable); }
		explicit operator IAny() const { return IAny(instance, vTable); }
		operator bool() const { return instance != nullptr; }

		template<IComplexLocationSinkImpl T>
		explicit operator T *() { return (T *)instance; }

		void Release() {
			if (!instance) return;
			vTable->Release(instance);
			*this = nullptr;
		}

		void SetReferenceLocation(const HPReal &x, const HPReal &y, HRReal radius) {
			return vTable->SetReferenceLocation(instance, x, y, radius);
		}

		using _IIG_IsInterface = void;
	};
}

#ifdef __INTELLISENSE__
#undef interface
#endif